# Generated by Django 5.0.6 on 2024-06-08 15:56

import django.core.validators
import django.db.models.deletion
from myapp.models.UserprofileFolder.userprofile_model import UserProfile , default_date, default_image, validate_image_file_size
from django.conf import settings
from django.db import migrations, models

class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('contenttypes', '0002_remove_content_type_name'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='ActivateAccount_Email',
            fields=[
                ('activation_id', models.AutoField(help_text='The ID of the activation email.', primary_key=True, serialize=False)),
                ('activation_key', models.CharField(help_text='The activation key for the account.', max_length=40)),
                ('activation_date', models.DateTimeField(auto_now_add=True, help_text='The date when the activation email was sent.')),
                ('is_active', models.BooleanField(default=False, help_text='Check this if the account has been activated.')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('comments_id', models.AutoField(help_text='The ID of the comment.', primary_key=True, serialize=False)),
                ('content', models.TextField(default='No comment', help_text='The comment must be between 1 and 500 characters long.', validators=[django.core.validators.MinLengthValidator(1), django.core.validators.MaxLengthValidator(500)])),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='The date when the comment was created.')),
                ('parent_comment', models.ForeignKey(blank=True, help_text='Select the parent comment if this is a reply.', null=True, on_delete=django.db.models.deletion.CASCADE, to='myapp.comment')),
                ('replies', models.ManyToManyField(blank=True, help_text='Select the replies to this comment.', to='myapp.comment')),
            ],
        ),
        migrations.CreateModel(
            name='Post',
            fields=[
                ('post_id', models.AutoField(help_text='The ID of the post.', primary_key=True, serialize=False)),
                ('content', models.TextField(default='No content', help_text='The post must be between 1 and 750 characters long.', validators=[django.core.validators.MinLengthValidator(1), django.core.validators.MaxLengthValidator(750)])),
                ('image', models.ImageField(blank=True, help_text='Upload an image for the post.', null=True, upload_to='posts/', validators=[validate_image_file_size])),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='The date when the post was created.')),
                ('is_private', models.BooleanField(default=False, help_text='Check this if you want the post to be private.')),
                ('comments', models.ManyToManyField(blank=True, help_text='Select the comments on the post.', related_name='post_comments', to='myapp.comment')),
            ],
        ),
        migrations.AddField(
            model_name='comment',
            name='post',
            field=models.ForeignKey(help_text='Select the post that the comment is for.', null=True, on_delete=django.db.models.deletion.CASCADE, to='myapp.post'),
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user_nickname', models.CharField(blank=True, max_length=25, null=True)),
                ('user_gender', models.CharField(blank=True, choices=[('M', 'Male'), ('F', 'Female'), ('O', 'Other')], default='', max_length=1, null=True)),
                ('user_country', models.CharField(blank=True, max_length=100, null=True)),
                ('user_phone', models.CharField(blank=True, max_length=25, null=True)),
                ('user_birth_date', models.DateField(blank=True, default=default_date, null=True)),
                ('user_register_date', models.DateTimeField(auto_now_add=True)),
                ('last_login', models.DateTimeField(auto_now=True)),
                ('user_bio', models.TextField(blank=True, null=True)),
                ('user_website', models.URLField(blank=True, null=True)),
                ('user_image_container', models.ImageField(blank=True, null=True, upload_to='')),
                ('user_profile_image', models.ImageField(blank=True, default=default_image, null=True, upload_to='')),
                ('active', models.BooleanField(default=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='post',
            name='likes',
            field=models.ManyToManyField(blank=True, help_text='Select the users who liked the post.', related_name='liked_posts', to='myapp.userprofile'),
        ),
        migrations.AddField(
            model_name='post',
            name='tagged_users',
            field=models.ManyToManyField(blank=True, help_text='Select the users who are tagged in the post.', related_name='tagged_posts', to='myapp.userprofile'),
        ),
        migrations.AddField(
            model_name='post',
            name='user',
            field=models.ForeignKey(help_text='Select the user who made the post.', on_delete=django.db.models.deletion.CASCADE, related_name='posts', to='myapp.userprofile'),
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('type', models.CharField(choices=[('like', 'Like'), ('comment', 'Comment'), ('follow', 'Follow'), ('tag', 'Tag'), ('message', 'Message')], help_text='Select the type of the notification.', max_length=20)),
                ('notification_id', models.AutoField(help_text='The ID of the notification.', primary_key=True, serialize=False)),
                ('content', models.TextField(default='No content', help_text='Enter the content of the notification.')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='The date when the notification was created.')),
                ('is_read', models.BooleanField(default=False, help_text='Check this if the notification has been read.')),
                ('user', models.ForeignKey(help_text='Select the user who will receive the notification.', on_delete=django.db.models.deletion.CASCADE, related_name='notifications', to='myapp.userprofile')),
            ],
        ),
        migrations.CreateModel(
            name='Message',
            fields=[
                ('message_id', models.AutoField(help_text='The ID of the message.', primary_key=True, serialize=False)),
                ('content', models.TextField(default='No content', help_text='Enter the content of the message.')),
                ('sent_at', models.DateTimeField(auto_now_add=True, help_text='The date when the message was sent.')),
                ('is_read', models.BooleanField(default=False, help_text='Check this if the message has been read.')),
                ('recipient', models.ForeignKey(help_text='Select the user who will receive the message.', on_delete=django.db.models.deletion.CASCADE, related_name='received_messages', to='myapp.userprofile')),
                ('sender', models.ForeignKey(help_text='Select the user who sent the message.', on_delete=django.db.models.deletion.CASCADE, related_name='sent_messages', to='myapp.userprofile')),
            ],
        ),
        migrations.CreateModel(
            name='Follow',
            fields=[
                ('follows_id', models.AutoField(help_text='The ID of the follow.', primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='The date when the follow was created.')),
                ('followee', models.ForeignKey(help_text='Select the user who is being followed.', on_delete=django.db.models.deletion.CASCADE, related_name='followers', to='myapp.userprofile')),
                ('follower_user', models.ForeignKey(help_text='Select the user who is following.', on_delete=django.db.models.deletion.CASCADE, related_name='following', to='myapp.userprofile')),
            ],
        ),
        migrations.AddField(
            model_name='comment',
            name='tagged_users',
            field=models.ManyToManyField(blank=True, help_text='Select the users who are tagged in the comment.', related_name='tagged_comments', to='myapp.userprofile'),
        ),
        migrations.AddField(
            model_name='comment',
            name='user',
            field=models.ForeignKey(help_text='Select the user who made the comment.', on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='myapp.userprofile'),
        ),
        migrations.CreateModel(
            name='ActivityLog',
            fields=[
                ('activity_id', models.AutoField(help_text='The ID of the activity.', primary_key=True, serialize=False)),
                ('action', models.CharField(choices=[('post', 'Post'), ('comment', 'Comment'), ('like', 'Like'), ('follow', 'Follow')], help_text='Select the type of the activity.', max_length=50)),
                ('time', models.DateTimeField(help_text='Enter the time when the activity was performed.')),
                ('user', models.ForeignKey(help_text='Select the user who performed the activity.', on_delete=django.db.models.deletion.CASCADE, to='myapp.userprofile')),
            ],
        ),
        migrations.CreateModel(
            name='Like',
            fields=[
                ('likes_id', models.AutoField(help_text='The ID of the like.', primary_key=True, serialize=False)),
                ('object_id', models.PositiveIntegerField(help_text='Enter the ID of the liked object.')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='The date when the like was created.')),
                ('content_type', models.ForeignKey(help_text='Select the content type of the liked object.', on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype')),
                ('user', models.ForeignKey(help_text='Select the user who made the like.', on_delete=django.db.models.deletion.CASCADE, to='myapp.userprofile')),
            ],
            options={
                'unique_together': {('user', 'content_type', 'object_id')},
            },
        ),
    ]
